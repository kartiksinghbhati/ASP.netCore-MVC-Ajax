@using System.IO

@model WebApplication_MVC_Ajax.Models.Employee

<style>
    .editButtons {
        padding-top: 20px;
    }
</style>

<h2>Edit Employee</h2>

<div id="editEmployeeForm">
    <input type="hidden" name="Id" value="@Model.Id">

    <div class="form-group">
        <label for="FirstName">First Name:</label>
        <input type="text" class="form-control" id="FirstName" name="FirstName" maxlength="50" value="@Model.FirstName" required>
    </div>

    <div class="form-group">
        <label for="LastName">Last Name:</label>
        <input type="text" class="form-control" id="LastName" name="LastName" maxlength="50" value="@Model.LastName" required>
    </div>

    <div class="form-group">
        <label for="DateOfBirth">Date of Birth:</label>
        <input type="date" class="form-control" id="DateOfBirth" name="DateOfBirth" value="@Model.DateOfBirth.ToString("yyyy-MM-dd")" required>
    </div>

    <div class="form-group">
        <label for="Salary">Salary:</label>
        <input type="number" class="form-control" id="Salary" name="Salary" value="@Model.Salary" required>
    </div>

    <div class="form-group">
        <label>Current Photo:</label>
        <img id="previewPhoto" src="@Model.PhotoBase64" alt="No Current Photo" style="max-width: 300px; max-height: 300px;">
    </div>


    <div class="form-group">
        <label for="PhotoBase64">Photo:</label>
        <input type="file" class="form-control" id="PhotoBase64" name="updatedPhoto">
    </div>

    <div class="form-group">
        <label>Gender:</label>
        <div class="form-check">
            <input type="radio" class="form-check-input" id="GenderMale" name="Gender" value="Male" @(Model.Gender == "Male" ? "checked" : "") required>
            <label class="form-check-label" for="GenderMale">Male</label>
        </div>
        <div class="form-check">
            <input type="radio" class="form-check-input" id="GenderFemale" name="Gender" value="Female" @(Model.Gender == "Female" ? "checked" : "") required>
            <label class="form-check-label" for="GenderFemale">Female</label>
        </div>
        <div class="form-check">
            <input type="radio" class="form-check-input" id="GenderOther" name="Gender" value="Other" @(Model.Gender == "Other" ? "checked" : "") required>
            <label class="form-check-label" for="GenderOther">Other</label>
        </div>
    </div>

    <div class="form-group">
        <label>Hobbies:</label>

        <label><input type="checkbox" name="Hobbies" value="Reading" @(Model.Hobbies != null && Model.Hobbies.Contains("Reading") ? "checked" : "") /> Reading</label>
        <label><input type="checkbox" name="Hobbies" value="Sports" @(Model.Hobbies != null && Model.Hobbies.Contains("Sports") ? "checked" : "") /> Sports</label>
        <label><input type="checkbox" name="Hobbies" value="Music" @(Model.Hobbies != null && Model.Hobbies.Contains("Music") ? "checked" : "") /> Music</label>
        <label><input type="checkbox" name="Hobbies" value="Painting" @(Model.Hobbies != null && Model.Hobbies.Contains("Painting") ? "checked" : "") /> Painting</label>
        <label><input type="checkbox" name="Hobbies" value="Dance" @(Model.Hobbies != null && Model.Hobbies.Contains("Dance") ? "checked" : "") /> Dance</label>
        <label><input type="checkbox" name="Hobbies" value="Photography" @(Model.Hobbies != null && Model.Hobbies.Contains("Photography") ? "checked" : "") /> Photography</label>
        <label><input type="checkbox" name="Hobbies" value="Gaming" @(Model.Hobbies != null && Model.Hobbies.Contains("Gaming") ? "checked" : "") /> Gaming</label>
    </div>

    <div class="form-group">
        <label for="IsActive">Active Status:</label>
        <select class="form-control" id="IsActive" name="IsActive" required>
            <option value="Active" selected="@(Model.IsActive == "Active")">Active</option>
            <option value="Inactive" selected="@(Model.IsActive == "Inactive")">Inactive</option>
        </select>
    </div>

    <div class="editButtons">
        <button type="button" class="btn btn-primary" id="updateButton">Update</button>
        <a href="@Url.Action("Index")" class="btn btn-secondary">Cancel</a>
    </div>
</div>

@section Scripts {

    <script>
        $(document).ready(function () {
            $('#updateButton').click(function () {
                var existingPhoto = "@Model.PhotoBase64";
                $('#previewPhoto').attr('src', existingPhoto);

                var firstName = $('input[name="FirstName"]').val();
                var lastName = $('input[name="LastName"]').val();
                var dateOfBirth = $('input[name="DateOfBirth"]').val();
                var salary = $('input[name="Salary"]').val();
                var gender = $('input[name="Gender"]:checked').val();
                var hobbies = $('input[name="Hobbies"]:checked').map(function () { return $(this).val(); }).get();
                var isActive = $('select[name="IsActive"]').val();

                var fileInput = document.getElementById('PhotoBase64');
                var updatedPhoto = null;

                if (fileInput.files.length > 0 && fileInput.files[0].size > 0) {
                    var reader = new FileReader();
                    reader.onload = function () {
                        updatedPhoto = reader.result;

                        $('#previewPhoto').attr('src', updatedPhoto);

                        var data = {
                            FirstName: firstName,
                            LastName: lastName,
                            DateOfBirth: dateOfBirth,
                            Salary: salary,
                            PhotoBase64: updatedPhoto,
                            Gender: gender,
                            Hobbies: hobbies,
                            IsActive: isActive
                        };

                        $.ajax({
                            url: '@Url.Action("Edit")',
                            type: 'POST',
                            data: JSON.stringify(data),
                            contentType: 'application/json',
                            success: function (result) {
                                if (result.success) {
                                    window.location.href = '@Url.Action("Index")';
                                } else {
                                    alert(result.message);
                                }
                            },
                            error: function (xhr, status, error) {
                                alert('An error occurred while adding the employee: ' + error);
                            }
                        });
                    };
                    reader.readAsDataURL(fileInput.files[0]);
                } else {

                    var data = {
                        FirstName: firstName,
                        LastName: lastName,
                        DateOfBirth: dateOfBirth,
                        Salary: salary,
                        PhotoBase64: null,
                        Gender: gender,
                        Hobbies: hobbies,
                        IsActive: isActive
                    };

                    $.ajax({
                        url: '@Url.Action("Edit")',
                        type: 'POST',
                        data: JSON.stringify(data),
                        contentType: 'application/json',
                        success: function (result) {
                            if (result.success) {
                                window.location.href = '@Url.Action("Index")';
                            } else {
                                alert(result.message);
                            }
                        },
                        error: function (xhr, status, error) {
                            alert('An error occurred while adding the employee: ' + error);
                        }
                    });
                }
            });
        });
    </script>
}